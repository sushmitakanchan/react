/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LearningRoutesImport } from './routes/learning-routes'
import { Route as AboutImport } from './routes/about'
import { Route as AppRouteImport } from './routes/app/route'
import { Route as IndexImport } from './routes/index'
import { Route as AppDashboardImport } from './routes/app/dashboard'
import { Route as ProductPidImport } from './routes/Product.$pid'

// Create Virtual Routes

const ProductsLazyImport = createFileRoute('/Products')()

// Create/Update Routes

const ProductsLazyRoute = ProductsLazyImport.update({
  id: '/Products',
  path: '/Products',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/Products.lazy').then((d) => d.Route))

const LearningRoutesRoute = LearningRoutesImport.update({
  id: '/learning-routes',
  path: '/learning-routes',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const AppRouteRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AppDashboardRoute = AppDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AppRouteRoute,
} as any)

const ProductPidRoute = ProductPidImport.update({
  id: '/Product/$pid',
  path: '/Product/$pid',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/learning-routes': {
      id: '/learning-routes'
      path: '/learning-routes'
      fullPath: '/learning-routes'
      preLoaderRoute: typeof LearningRoutesImport
      parentRoute: typeof rootRoute
    }
    '/Products': {
      id: '/Products'
      path: '/Products'
      fullPath: '/Products'
      preLoaderRoute: typeof ProductsLazyImport
      parentRoute: typeof rootRoute
    }
    '/Product/$pid': {
      id: '/Product/$pid'
      path: '/Product/$pid'
      fullPath: '/Product/$pid'
      preLoaderRoute: typeof ProductPidImport
      parentRoute: typeof rootRoute
    }
    '/app/dashboard': {
      id: '/app/dashboard'
      path: '/dashboard'
      fullPath: '/app/dashboard'
      preLoaderRoute: typeof AppDashboardImport
      parentRoute: typeof AppRouteImport
    }
  }
}

// Create and export the route tree

interface AppRouteRouteChildren {
  AppDashboardRoute: typeof AppDashboardRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppDashboardRoute: AppDashboardRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/learning-routes': typeof LearningRoutesRoute
  '/Products': typeof ProductsLazyRoute
  '/Product/$pid': typeof ProductPidRoute
  '/app/dashboard': typeof AppDashboardRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/learning-routes': typeof LearningRoutesRoute
  '/Products': typeof ProductsLazyRoute
  '/Product/$pid': typeof ProductPidRoute
  '/app/dashboard': typeof AppDashboardRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/learning-routes': typeof LearningRoutesRoute
  '/Products': typeof ProductsLazyRoute
  '/Product/$pid': typeof ProductPidRoute
  '/app/dashboard': typeof AppDashboardRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/about'
    | '/learning-routes'
    | '/Products'
    | '/Product/$pid'
    | '/app/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/app'
    | '/about'
    | '/learning-routes'
    | '/Products'
    | '/Product/$pid'
    | '/app/dashboard'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/about'
    | '/learning-routes'
    | '/Products'
    | '/Product/$pid'
    | '/app/dashboard'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  LearningRoutesRoute: typeof LearningRoutesRoute
  ProductsLazyRoute: typeof ProductsLazyRoute
  ProductPidRoute: typeof ProductPidRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  LearningRoutesRoute: LearningRoutesRoute,
  ProductsLazyRoute: ProductsLazyRoute,
  ProductPidRoute: ProductPidRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/app",
        "/about",
        "/learning-routes",
        "/Products",
        "/Product/$pid"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/app": {
      "filePath": "app/route.jsx",
      "children": [
        "/app/dashboard"
      ]
    },
    "/about": {
      "filePath": "about.jsx"
    },
    "/learning-routes": {
      "filePath": "learning-routes.jsx"
    },
    "/Products": {
      "filePath": "Products.lazy.jsx"
    },
    "/Product/$pid": {
      "filePath": "Product.$pid.jsx"
    },
    "/app/dashboard": {
      "filePath": "app/dashboard.jsx",
      "parent": "/app"
    }
  }
}
ROUTE_MANIFEST_END */
